---
name: Usage Test
on:  # yamllint disable-line rule:truthy
  pull_request:
  workflow_call:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.ref }}'
  cancel-in-progress: true

jobs:
  usage-test-amd64:
    name: Docker - Test (amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          tags: steamcmd-${{ github.run_id }}
          platforms: linux/amd64

      - name: Run steamcmd
        run: |
            docker run --rm -i \
            -v ./palworld:/palworld \
            --stop-timeout 30 \
            steamcmd-${{ github.run_id }} \
            +force_install_dir /palworld +login anonymous +app_update 2394010 validate +quit

      - name: Clone palworld
        uses: actions/checkout@v4
        with:
          repository: USA-RedDragon/palworld-server-docker
          ref: main
          path: palworld

      - name: Build palworld
        uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          tags: palworld-${{ github.run_id }}
          platforms: linux/amd64
          context: ./palworld

      - name: Run server
        run: |
            mkdir -p ./backups && sudo chown -R 1000:1000 ./backups
            mkdir -p ./saves && sudo chown -R 1000:1000 ./saves
            docker run -d \
            --name palworld-server \
            --platform linux/amd64 \
            -p 8211:8211/udp \
            -p 27015:27015/udp \
            -p 25575:25575/tcp \
            -e BOX64_LOG=1 \
            -e BOX86_LOG=1 \
            -v ./backups:/backups/ \
            -v ./saves:/saves/ \
            -e PORT=8211 \
            -e PLAYERS=16 \
            -e MULTITHREADING=true \
            -e RCON_ENABLED=true \
            -e RCON_PORT=25575 \
            -e TZ=UTC \
            -e ADMIN_PASSWORD="adminPasswordHere" \
            -e SERVER_PASSWORD="worldofpals" \
            -e COMMUNITY=false \
            -e SERVER_NAME="World of Pals" \
            -e SERVER_DESCRIPTION="palworld-server-docker by Thijs van Loef" \
            --restart unless-stopped \
            --stop-timeout 30 \
            palworld-${{ github.run_id }}

      - name: Wait for server to start
        id: wait-start
        run: |
            TIMEOUT_SECONDS=400
            START_TIME=$(date +%s)

            while ! docker logs palworld-server 2>&1 | grep -q "Setting breakpad minidump AppID"; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

              if [ $ELAPSED_TIME -gt $TIMEOUT_SECONDS ]; then
                echo "Timeout reached. Server failed to start within $TIMEOUT_SECONDS seconds." 1>&2
                echo "error=Timeout reached. Server failed to start within $TIMEOUT_SECONDS seconds." >> $GITHUB_OUTPUT
                docker logs palworld-server 1>logs.txt 2>&1
                exit 1  # or handle the failure accordingly
              fi

              echo "Waiting for server to start..."
              sleep 5
            done

      - name: Upload logs
        if: steps.wait-start.outcome == 'failure'
        id: upload-logs-wait-start
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs.txt

      - name: Test if server is up and running
        id: test-server
        if: steps.wait-start.outcome == 'success'
        continue-on-error: true
        run: |
            sleep 100
            if ! docker exec palworld-server rcon-cli Info | grep -q "Welcome to Pal Server"; then
              echo "Server may not have started successfully."
              echo "error=Server may not have started successfully." >> $GITHUB_OUTPUT
              docker logs palworld-server 1>logs.txt 2>&1
              exit 1
            fi
    
      - name: Upload logs
        if: steps.test-server.outcome == 'failure'
        id: upload-logs-test-server
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs.txt
    
      - name: Test if port 8211, 27015 and 25575 are listening
        id: test-ports
        if: steps.test-server.outcome == 'success'
        continue-on-error: true
        run: |
            check() {
              PROTOCOL=${1:-}
              PORT=${2:-}

              UDPARG=""
              if [ "${PROTOCOL}" = "udp" ]; then
                UDPARG="-u"
              fi

              if ! nc -z ${UDPARG} -v 127.0.0.1 ${PORT}; then
                echo "Port ${PORT} is not listening."
                docker logs palworld-server 1>logs.txt 2>&1
                return 1
              fi
            }
            doExit() {
              cat error.txt
              echo "error<<xxEOFxx" >> $GITHUB_OUTPUT
              echo "$(cat error.txt)" >> $GITHUB_OUTPUT
              echo "xxEOFxx" >> $GITHUB_OUTPUT
              exit 1
            }
            check udp  8211 > error.txt || doExit
            check udp 27015 > error.txt || doExit
            check tcp 25575 > error.txt || doExit
    
      - name: Upload logs
        id: upload-logs-test-ports
        if: steps.test-ports.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs.txt

      - uses: actions/github-script@v7
        id: github-script
        env:
          ERROR_WAIT_START: "${{ steps.wait-start.outputs.error }}"
          LOG_WAIT_START: "${{ steps.upload-logs-wait-start.outputs.artifact-url }}"
          ERROR_TEST_SERVER: "${{ steps.test-server.outputs.error }}"
          LOG_TEST_SERVER: "${{ steps.upload-logs-test-server.outputs.artifact-url }}"
          ERROR_TEST_PORTS: "${{ steps.test-ports.outputs.error }}"
          LOG_TEST_PORTS: "${{ steps.upload-logs-test-ports.outputs.artifact-url }}"
        with:
          result-encoding: string
          script: |
            let comment = `## End-to-end Checks (amd64)\n\n`;
            let shouldFail = false;

            if ("${{ steps.wait-start.outcome }}" == "failure") {
              comment += `\n#### ❌ Wait for server start failed\n> \`${process.env.ERROR_WAIT_START}\`\n`;
              comment += `\n[Container Logs](${process.env.LOG_WAIT_START})\n`;
              shouldFail = true;
            } else {
              if ("${{ steps.test-server.outcome }}" == "success") {
                comment += `\n#### ✅ Server started successfully`;
                if ("${{ steps.test-ports.outcome }}" == "success") {
                  comment += `\n#### ✅ Server ports are listening`;
                } else {
                  comment += `\n#### ❌ Server ports are not listening\n> \`${process.env.ERROR_TEST_PORTS}\`\n`;
                  comment += `\n[Container Logs](${process.env.LOG_TEST_PORTS})\n`;
                  shouldFail = true;
                }
              } else {
                comment += `\n#### ❌ Server did not start\n> \`${process.env.ERROR_TEST_SERVER}\`\n`;
                comment += `\n[Container Logs](${process.env.LOG_TEST_SERVER})\n`;
                shouldFail = true;
              }
            }

            comment += `\n\n---\nThis comment is automatically generated by the GitHub Actions workflow. It will automatically update when the workflow is ran again.\n`;

            core.setOutput("fail", shouldFail);

            return comment;
  
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          comment-author: github-actions[bot]
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: '## End-to-end Checks (amd64)'

      - name: Create comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.github-script.outputs.result }}

      - name: Fail if needed
        if: steps.github-script.outputs.fail == 'true'
        run: exit 1

  usage-test-arm64:
    name: Docker - Test (arm64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          tags: steamcmd-${{ github.run_id }}
          platforms: linux/arm64

      - name: Run steamcmd
        run: |
            docker run --rm -i \
            --platform linux/arm64 \
            -v ./palworld:/palworld \
            --stop-timeout 30 \
            steamcmd-${{ github.run_id }} \
            +force_install_dir /palworld +login anonymous +app_update 2394010 validate +quit

      - name: Clone palworld
        uses: actions/checkout@v4
        with:
          repository: USA-RedDragon/palworld-server-docker
          ref: main
          path: palworld

      - name: Build palworld
        uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          tags: palworld-${{ github.run_id }}
          platforms: linux/arm64
          context: ./palworld

      - name: Run server
        run: |
            mkdir -p ./backups && sudo chown -R 1000:1000 ./backups
            mkdir -p ./saves && sudo chown -R 1000:1000 ./saves
            docker run -d \
            --name palworld-server \
            --platform linux/arm64 \
            -p 8211:8211/udp \
            -p 27015:27015/udp \
            -p 25575:25575/tcp \
            -e BOX64_LOG=1 \
            -e BOX86_LOG=1 \
            -v ./backups:/backups/ \
            -v ./saves:/saves/ \
            -e PORT=8211 \
            -e PLAYERS=16 \
            -e MULTITHREADING=true \
            -e RCON_ENABLED=true \
            -e RCON_PORT=25575 \
            -e TZ=UTC \
            -e ADMIN_PASSWORD="adminPasswordHere" \
            -e SERVER_PASSWORD="worldofpals" \
            -e COMMUNITY=false \
            -e SERVER_NAME="World of Pals" \
            -e SERVER_DESCRIPTION="palworld-server-docker by Thijs van Loef" \
            --restart unless-stopped \
            --stop-timeout 30 \
            palworld-${{ github.run_id }}

      - name: Wait for server to start
        id: wait-start
        run: |
            TIMEOUT_SECONDS=400
            START_TIME=$(date +%s)

            while ! docker logs palworld-server 2>&1 | grep -q "Setting breakpad minidump AppID"; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

              if [ $ELAPSED_TIME -gt $TIMEOUT_SECONDS ]; then
                echo "Timeout reached. Server failed to start within $TIMEOUT_SECONDS seconds." 1>&2
                echo "error=Timeout reached. Server failed to start within $TIMEOUT_SECONDS seconds." >> $GITHUB_OUTPUT
                docker logs palworld-server 1>logs.txt 2>&1
                exit 1  # or handle the failure accordingly
              fi

              echo "Waiting for server to start..."
              sleep 5
            done

      - name: Upload logs
        if: steps.wait-start.outcome == 'failure'
        id: upload-logs-wait-start
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs.txt

      - name: Test if server is up and running
        id: test-server
        if: steps.wait-start.outcome == 'success'
        continue-on-error: true
        run: |
            sleep 100
            if ! docker exec palworld-server rcon-cli Info | grep -q "Welcome to Pal Server"; then
              echo "Server may not have started successfully."
              echo "error=Server may not have started successfully." >> $GITHUB_OUTPUT
              docker logs palworld-server 1>logs.txt 2>&1
              exit 1
            fi
    
      - name: Upload logs
        if: steps.test-server.outcome == 'failure'
        id: upload-logs-test-server
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs.txt
    
      - name: Test if port 8211, 27015 and 25575 are listening
        id: test-ports
        if: steps.test-server.outcome == 'success'
        continue-on-error: true
        run: |
            check() {
              PROTOCOL=${1:-}
              PORT=${2:-}

              UDPARG=""
              if [ "${PROTOCOL}" = "udp" ]; then
                UDPARG="-u"
              fi

              if ! nc -z ${UDPARG} -v 127.0.0.1 ${PORT}; then
                echo "Port ${PORT} is not listening."
                docker logs palworld-server 1>logs.txt 2>&1
                return 1
              fi
            }
            doExit() {
              cat error.txt
              echo "error<<xxEOFxx" >> $GITHUB_OUTPUT
              echo "$(cat error.txt)" >> $GITHUB_OUTPUT
              echo "xxEOFxx" >> $GITHUB_OUTPUT
              exit 1
            }
            check udp  8211 > error.txt || doExit
            check udp 27015 > error.txt || doExit
            check tcp 25575 > error.txt || doExit
    
      - name: Upload logs
        id: upload-logs-test-ports
        if: steps.test-ports.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs.txt

      - uses: actions/github-script@v7
        id: github-script
        env:
          ERROR_WAIT_START: "${{ steps.wait-start.outputs.error }}"
          LOG_WAIT_START: "${{ steps.upload-logs-wait-start.outputs.artifact-url }}"
          ERROR_TEST_SERVER: "${{ steps.test-server.outputs.error }}"
          LOG_TEST_SERVER: "${{ steps.upload-logs-test-server.outputs.artifact-url }}"
          ERROR_TEST_PORTS: "${{ steps.test-ports.outputs.error }}"
          LOG_TEST_PORTS: "${{ steps.upload-logs-test-ports.outputs.artifact-url }}"
        with:
          result-encoding: string
          script: |
            let comment = `## End-to-end Checks (arm64)\n\n`;
            let shouldFail = false;

            if ("${{ steps.wait-start.outcome }}" == "failure") {
              comment += `\n#### ❌ Wait for server start failed\n> \`${process.env.ERROR_WAIT_START}\`\n`;
              comment += `\n[Container Logs](${process.env.LOG_WAIT_START})\n`;
              shouldFail = true;
            } else {
              if ("${{ steps.test-server.outcome }}" == "success") {
                comment += `\n#### ✅ Server started successfully`;
                if ("${{ steps.test-ports.outcome }}" == "success") {
                  comment += `\n#### ✅ Server ports are listening`;
                } else {
                  comment += `\n#### ❌ Server ports are not listening\n> \`${process.env.ERROR_TEST_PORTS}\`\n`;
                  comment += `\n[Container Logs](${process.env.LOG_TEST_PORTS})\n`;
                  shouldFail = true;
                }
              } else {
                comment += `\n#### ❌ Server did not start\n> \`${process.env.ERROR_TEST_SERVER}\`\n`;
                comment += `\n[Container Logs](${process.env.LOG_TEST_SERVER})\n`;
                shouldFail = true;
              }
            }

            comment += `\n\n---\nThis comment is automatically generated by the GitHub Actions workflow. It will automatically update when the workflow is ran again.\n`;

            core.setOutput("fail", shouldFail);

            return comment;
  
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          comment-author: github-actions[bot]
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: '## End-to-end Checks (arm64)'

      - name: Create comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.github-script.outputs.result }}

      - name: Fail if needed
        if: steps.github-script.outputs.fail == 'true'
        run: exit 1
